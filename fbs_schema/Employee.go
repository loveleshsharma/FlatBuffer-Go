// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs_schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Employee struct {
	_tab flatbuffers.Table
}

func GetRootAsEmployee(buf []byte, offset flatbuffers.UOffsetT) *Employee {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Employee{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Employee) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Employee) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Employee) Eno() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Employee) MutateEno(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Employee) FistName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Employee) LastName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Employee) PhonoNo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Employee) Salary() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Employee) MutateSalary(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func EmployeeStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func EmployeeAddEno(builder *flatbuffers.Builder, Eno int32) {
	builder.PrependInt32Slot(0, Eno, 0)
}
func EmployeeAddFistName(builder *flatbuffers.Builder, FistName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(FistName), 0)
}
func EmployeeAddLastName(builder *flatbuffers.Builder, LastName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(LastName), 0)
}
func EmployeeAddPhonoNo(builder *flatbuffers.Builder, PhonoNo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(PhonoNo), 0)
}
func EmployeeAddSalary(builder *flatbuffers.Builder, Salary int32) {
	builder.PrependInt32Slot(4, Salary, 0)
}
func EmployeeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
